pipeline {
    agent any

    environment {
        PROJECT_NAME = 'CodeForU'
        DJANGO_IMAGE_NAME = 'mohamadaj/bs-pmc-2024-team14-web:latest'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        DOCKER_HUB_CREDENTIALS = 'docker-hub-14'  // Your Jenkins credentials ID for Docker Hub
    }

    stages {
        stage('Clone repository') {
            steps {
                git url: 'https://github.com/BS-PMC-2024/BS-PMC-2024-Team14.git', credentialsId: 'github-credentials-14'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub
                    withCredentials([usernamePassword(credentialsId: env.DOCKER_HUB_CREDENTIALS, passwordVariable: 'DOCKER_HUB_PASS', usernameVariable: 'DOCKER_HUB_USER')]) {
                        sh """
                            echo \$DOCKER_HUB_PASS | docker login -u \$DOCKER_HUB_USER --password-stdin
                        """
                    }
                    // Build and push Django Docker image
                    sh """
                        docker build -t ${env.DJANGO_IMAGE_NAME} .
                        docker push ${env.DJANGO_IMAGE_NAME}
                    """
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d"
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} exec web python CodeForU/manage.py test"
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'main'  // Deploy only when on the main branch
            }
            steps {
                script {
                    sh """
                        docker-compose -f ${env.DOCKER_COMPOSE_FILE} pull
                        docker-compose -f ${env.DOCKER_COMPOSE_FILE} up -d
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                sh "docker-compose -f ${env.DOCKER_COMPOSE_FILE} down"
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
